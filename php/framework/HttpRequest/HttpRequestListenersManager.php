<?/** * Created by Nkconcept. * Date: 27/03/2016 * Time: 00:49 */abstract class HttpRequestListenersManager implements HttpRequestListenersManagerConfigurator{    /* @var $responses Row */    protected static $http_request_listener_manager_responses;    /* @var $http_request_executer callable */    protected static $http_request_executer_setter_function;    /* @var $http_request_listener_index string */    protected static $http_request_listener_index;    /**     * @return Row     */    public static function getHttpRequestListenerManagerResponses()    {        if (is_a(static::$http_request_listener_manager_responses, Table::class)) static::$http_request_listener_manager_responses = new Table();        return self::$http_request_listener_manager_responses;    }    /**     * @return HttpRequestExecuter     * @throws Exception     */    public static function getHttpRequestExecuter()    {        $http_request_executer = call_user_func(self::getHttpRequestExecuterSetterFunction());        if (!is_a($http_request_executer, HttpRequestExecuter::class)) throw new Exception("Http request executer needed.");        return $http_request_executer;    }    /**     * @return string     */    public static function getHttpRequestListenerIndex()    {        return self::$http_request_listener_index;    }    public static function executeHttpRequest($display_exception = false)    {        try {            $HttpRequestExecuter = self::getHttpRequestExecuter();            if (!is_a($HttpRequestExecuter, HttpRequestExecuter::class)) throw new Exception("Http request executer needed.");            $ExecuterClassName = get_class($HttpRequestExecuter);            $ExecutionList = self::getExecutions(new ReflectionClass($ExecuterClassName));            if ($ExecutionList->indexExists($_REQUEST[static::getHttpRequestListenerIndex()]) and $_REQUEST[static::getHttpRequestListenerIndex()]) {                $Execution = $ExecutionList->getRow($_REQUEST[static::getHttpRequestListenerIndex()]);                $ExecutionFunctionName = $Execution->getColumn("name")->getValue();                $isAjax = $Execution->getColumn("isAjax")->getValue();                $ReflectionMethod = new ReflectionMethod($ExecuterClassName, $ExecutionFunctionName);                $parameters = $ReflectionMethod->getParameters();                $ExecutionFunctionParameters = array();                foreach ($parameters as $parameter) {                    if (isset($_REQUEST[$parameter->getName()]))                        $ExecutionFunctionParameters[] = $_REQUEST[$parameter->getName()];                    elseif (!$display_exception) $ExecutionFunctionParameters[] = null;                    else throw new HttpRequestExecutionMissingArgumentException("Missing arguement {$parameter->getName()} for $ExecuterClassName::$ExecutionFunctionName.");                }                /* @var $Response Response */                $Response = self::executeRequest($HttpRequestExecuter, $ExecutionFunctionName, $ExecutionFunctionParameters);                if (!is_a($Response, Response::class)) throw new Exception("Execution $ExecutionFunctionName not returning Response instance.");                if (!is_a(static::$http_request_listener_manager_responses, Row::class)) static::$http_request_listener_manager_responses = new Row();                static::$http_request_listener_manager_responses->addColumn(new Column($Execution->getIndex(), $Response));                if ($isAjax) die($Response->toJson());            } elseif ($_REQUEST[static::getHttpRequestListenerIndex()]) throw new Exception("Http request execution {$_REQUEST[ static::getHttpRequestListenerIndex() ]} unknown.");        } catch (HttpRequestExecutionMissingArgumentException $e) {            $Response = new Response(                array(                    "status" => false,                    "type" => "danger",                    "title" => htmlentities("Erreur"),                    "message" => htmlentities("Missing paramters.")                )            );            if ($display_exception) die($Response->toJson());        } catch (Exception $e) {            if ($display_exception) die($e);        }    }    public static function executeRequest(HttpRequestExecuter $HttpRequestExecuter, $ExecutionFunctionName, $ExecutionFunctionParameters)    {        try {            DatabaseAccessor::connection()->open();            if (!DatabaseAccessor::connection()->inTransaction()) DatabaseAccessor::connection()->beginTransaction();            $Response = call_user_func_array(array($HttpRequestExecuter, $ExecutionFunctionName), $ExecutionFunctionParameters);            DatabaseAccessor::connection()->commit();            return $Response;        } catch (UserFriendlyException $e) {            DatabaseAccessor::connection()->commit();            $Response = new Response(                array(                    "status" => false,                    "type" => "danger",                    "title" => mb_convert_encoding($e->getTitle(), 'HTML-ENTITIES', 'UTF-8'),                    "message" => mb_convert_encoding($e->getMessage(), 'HTML-ENTITIES', 'UTF-8'),                    "code" => $e->getCode()                )            );            if ($e->getCallback()) {                $Response->push("callback", $e->getCallback());                $Response->push("callbackData", $e->getCallbackData());            }            return $Response;        } catch (Exception $e) {            DatabaseAccessor::connection()->rollback();            return new Response(                array(                    "status" => false,                    "type" => "warning",                    "title" => htmlentities("Erreur"),                    "message" => htmlentities("Erreur tÃ©chnique") . $e->getMessage()                )            );        }    }    public static function getExecutions(ReflectionClass $ReflectionClass)    {        $FunctionAnnotationParams = new Table();        $ReflectionMethods = $ReflectionClass->getMethods(ReflectionMethod::IS_PUBLIC);        foreach ($ReflectionMethods As $ReflectionMethod) {            $annotations = array();            preg_match_all('/@([a-zA-Z]+)\(index="(.*)",isAjax="(.*)"\)/', $ReflectionMethod->getDocComment(), $annotations);            /** TODO develope this part **/            if (count($annotations[1])) {                $FunctionAnnotationParams->addRow(new Row(array("name" => $ReflectionMethod->getName(), "isAjax" => filter_var($annotations[3][0], FILTER_VALIDATE_BOOLEAN)), $annotations[2][0]));            }        }        return $FunctionAnnotationParams;    }    /**     * @param $index     * @return bool|Response     */    public static function getHttpRequestResponse($index)    {        if (!is_a(static::$http_request_listener_manager_responses, Table::class)) return false;        if ($Row = static::$http_request_listener_manager_responses->indexExists($index)) return $Row->next()->getValue();        else return false;    }    /**     * @return callable     */    public static function getHttpRequestExecuterSetterFunction()    {        return self::$http_request_executer_setter_function;    }}