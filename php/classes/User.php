<?/** * Class User */class User extends WritablePersistence implements HttpRequestExecuter{    /**     * @var null     */    /**     * @var null     */    /**     * @var null     */    /**     * @var null     */    /**     * @var null     */    /**     * @var null|string     */    /**     * @var null|string     */    /**     * @var null|string     */    protected $id, $fname, $lname, $username, $email, $password, $status, $updated_at, $added_at;    /**     * User constructor.     * @param null $id     * @param null $fname     * @param null $lname     * @param null $username     * @param null $email     * @param null $password     * @param null $status     * @param null $updated_at     * @param null $added_at     */    public function __construct($id = null, $fname = null, $lname = null, $username = null, $email = null, $password = null, $status = null, $updated_at = null, $added_at = null)    {        parent::__construct();        $this->id = $id;        $this->fname = $fname;        $this->lname = $lname;        $this->username = $username;        $this->email = $email;        $this->password = $password !== null ? md5($password) : $password;        $this->status = $status;        $this->updated_at = $updated_at;        $this->added_at = $added_at;    }    /**     * @return null|string     */    public function getId()    {        return $this->id;    }    /**     * @return null|string     */    public function getFname()    {        return $this->fname;    }    /**     * @return null|string     */    public function getLname()    {        return $this->lname;    }    /**     * @return string     */    public function getFullname()    {        return strtoupper($this->getLname()) . " " . $this->getFname();    }    /**     * @return null|string     */    public function getUsername()    {        return $this->username;    }    /**     * @return null|string     */    public function getEmail()    {        return $this->email;    }    /**     * @return null|string     */    public function getPassword()    {        return $this->password;    }    /**     * @return null|string     */    public function getStatus()    {        return $this->status;    }    /**     * @return null|string     */    public function getAddedAt()    {        return $this->added_at;    }    /**     * @return null|string     */    public function getUpdatedAt()    {        return $this->updated_at;    }    /**     * @param $id     */    public function setId($id)    {        $this->id = $id;    }    /**     * @param $fname     */    public function setFname($fname)    {        $this->fname = $fname;    }    /**     * @param $lname     */    public function setLname($lname)    {        $this->lname = $lname;    }    /**     * @param $username     */    public function setUsername($username)    {        $this->username = $username;    }    /**     * @param $email     */    public function setEmail($email)    {        $this->email = $email;    }    /**     * @param $password     */    public function setPassword($password)    {        $this->password = md5($password);    }    /**     * @param $status     */    public function setStatus($status)    {        $this->status = $status;    }    /**     * @param $added_at     */    public function setAddedAt($added_at)    {        $this->added_at = $added_at;    }    /**     * @param $updated_at     */    public function setUpdatedAt($updated_at)    {        $this->updated_at = $updated_at;    }    public function getActionKey()    {        $LastUserUpdate = new Dtime(strtotime($this->getUpdatedAt()));        $username_md5 = md5($this->getUsername());        $base_md5 = md5($username_md5 . $LastUserUpdate->getTime());        $base_md5_reversed = strrev($base_md5);        $key = substr($base_md5_reversed, 0, 16);        return $key;    }    /**     * @return Table     */    public function getDeviceList()    {        return parent::getDeviceList();    }    /**     * @execution(index="sign-out",isAjax="false")     */    public function signout()    {        Session::remove("user");    }    /**     * @param $id_device     * @return Response     * @throws UserFriendlyException     * @execution(index="select-device",isAjax="false")     */    public function selectDevice($id_device)    {        if (!Device::isDevice($id_device)) throw new UserFriendlyException("", "");        $Device = Device::getDevice($id_device);        if ($Device->getIdUser() != $this->getId()) throw new UserFriendlyException("", "");        Session::put("id_device", $Device->getId());        return new Response(            array(                "status" => true            )        );    }    /**     * @return Device|null     */    public function getSelectedDevice()    {        if (Session::get("id_device")) {            if (Device::isDevice(Session::get("id_device"))) {                $Device = Device::getDevice(Session::get("id_device"));                if ($Device->getIdUser() == $this->getId()) return $Device;                else Session::remove("id_device");            } else Session::remove("id_device");        }        return null;    }    /**     * @param $language     * @return Response     * @throws UserFriendlyException     * @execution(index="change-language",isAjax="false")     */    public function changeLanguage($language)    {        return (new Visitor())->changeLanguage($language);    }    /**     * @param $thread_id     * @return Response     * @throws Exception     * @throws UserFriendlyException     * @execution(index="delete-conversation",isAjax="true")     */    public function deleteConversation($thread_id)    {        $thread_id = intval($thread_id);        if (!strlen($thread_id)) throw new Exception();        $Device = $this->getSelectedDevice();        if (!$Device) throw new UserFriendlyException(Translator::getString("noselecteddevice"), Translator::getString("failed"));        $SmsList = $Device->getSmsList($thread_id);        if (!$SmsList->length()) throw new UserFriendlyException(Translator::getString("conversationnotfound"), Translator::getString("failed"));        $Sms = new Sms();        $Sms->setIdDevice($Device->getId());        $Sms->setThreadId($thread_id);        $Sms->delete();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("conversationdeleted"),                "redirect" => Smshistory::getUrl(),                "timeBeforeRedirect" => 2000            )        );    }    /**     * @param $id_call     * @throws UserFriendlyException     * @execution(index="read-call-record",isAjax="true")     */    public function readCallRecord($id_call)    {        $id_call = intval($id_call);        $Device = $this->getSelectedDevice();        if (!Call::isCall($Device->getId(), $id_call)) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        $Call = Call::getCall($Device->getId(), $id_call);        if ($Call->getIdDevice() != $Device->getId()) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        $file = Api::$MEDIA_FILES_UPLOAD_PATH . "{$Device->getId()}/" . Call::$UPLOAD_RELATIVE_PATH . $Call->getRecord();        if (!file_exists($file)) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        header('Content-Description: Call Record');        header("Content-Type: audio/mp4");        header("Content-Transfer-Encoding: binary");        header('Content-Disposition: attachment; filename="' . basename($file) . '.mp4"');        header('Expires: 0');        header('Cache-Control: must-revalidate');        header('Pragma: public');        header('Content-Length: ' . filesize($file));        readfile($file);        exit;    }    /**     * @param $id_call     * @return Response     * @throws UserFriendlyException     * @execution(index="delete-call",isAjax="true")     */    public function deleteCallRecord($id_call)    {        $id_call = intval($id_call);        $Device = $this->getSelectedDevice();        if (!Call::isCall($Device->getId(), $id_call)) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        $Call = Call::getCall($Device->getId(), $id_call);        if ($Call->getIdDevice() != $Device->getId()) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        $Call->delete();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("calldeleted"),                "redirect" => Callhistory::getUrl(),                "timeBeforeRedirect" => 2000            )        );    }    /**     * @param $allowed_sync_network     * @param $sync_time_interval     * @return Response     * @throws UserFriendlyException     * @execution(index="update-properties",isAjax="true")     */    public function updateProperties($allowed_sync_network, $sync_time_interval)    {        $Device = $this->getSelectedDevice();        $allowed_sync_network = $allowed_sync_network == 2 ? 2 : 1;        if (!in_array($sync_time_interval, array(30, 180, 300, 900, 1800))) throw new UserFriendlyException(Translator::getString("synctimeintervalrejected"), Translator::getString("failed"));        $Device->setAllowedSyncNetwork($allowed_sync_network);        $Device->setSyncTimeInterval($sync_time_interval);        $Device->setSync("N");        $Device->save();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("propertiesupdated"),                "redirect" => $_SERVER["HTTP_REFERER"],                "timeBeforeRedirect" => 2000,                "keepFormData" => true            )        );    }    public function getDeviceCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM device WHERE YEAR(added_at)=:year AND id_user=:id_user GROUP BY MONTH(added_at)");        $pstm->setValue("id_user", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        return $result;    }    public function getSmsCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM sms WHERE YEAR(added_at)=:year AND id_device IN (SELECT id FROM device WHERE id_user=:id_user) GROUP BY MONTH(added_at)");        $pstm->setValue("id_user", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        return $result;    }    public function getCallCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM `call` WHERE YEAR(added_at)=:year AND id_device IN (SELECT id FROM device WHERE id_user=:id_user) GROUP BY MONTH(added_at)");        $pstm->setValue("id_user", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        return $result;    }    public function getWarningsCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM `call` WHERE YEAR(added_at)=:year AND warning='Y' AND id_device IN (SELECT id FROM device WHERE id_user=:id_user) GROUP BY MONTH(added_at)");        $pstm->setValue("id_user", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM sms WHERE warning='Y' AND YEAR(added_at)=:year AND id_device IN (SELECT id FROM device WHERE id_user=:id_user) GROUP BY MONTH(added_at)");        $pstm->setValue("id_user", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue())+$result->getColumn($row->getColumn("month")->getValue())->getValue());        }        return $result;    }    public function getCallAndSmsCountPerMonth($year)    {        $SmsStatistics = $this->getSmsCountPerMonth($year);        $CallStatistics = $this->getCallCountPerMonth($year);        while ($SmsStatistics->hasNext()) {            $column = $SmsStatistics->next();            $column->setValue($column->getValue() + $CallStatistics->getColumn($column->getIndex())->getValue());        }        return $SmsStatistics;    }    /**     * @param $id_device     * @return Response     * @throws UserFriendlyException     * @Execution(index="inbind-device",isAjax="true")     */    public function inbindDevice($id_device)    {        if (!Device::columnValueExists("id", $id_device)) throw new UserFriendlyException(Translator::getString("unknowndevice"), Translator::getString("failed"));        $Device = Device::getDevice($id_device);        if ($Device->getIdUser() != $this->getId()) throw new UserFriendlyException(Translator::getString("unknowndevice"), Translator::getString("failed"));        $Device->delete();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("calldeleted"),                "redirect" => $_SERVER["HTTP_REFERER"],                "timeBeforeRedirect" => 2000            )        );    }    /**     * @param $id_sms     * @return Response     * @throws Exception     * @throws UserFriendlyException     * @Execution(index="toggle-sms-warning",isAjax="true")     */    public function togglekSmsWarning($id_device, $id_sms)    {        if (!Sms::columnValueExists("_id", $id_sms) or !Device::columnValueExists("id", $id_device)) throw new UserFriendlyException(Translator::getString("smsnotfound"), Translator::getString("failed"));        $Sms = new Sms($id_device);        $Sms->setId($id_sms);        $Sms->load();        if ($Sms->getDevice()->getIdUser() != $this->getId()) throw new UserFriendlyException(Translator::getString("smsnotfound"), Translator::getString("failed"));        $Sms->setWarning($Sms->getWarning()=="Y" ? "N":"Y");        $Sms->save();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("smsupdated")            )        );    }    /**     * @param $id_device     * @param $id_call     * @return Response     * @throws Exception     * @throws UserFriendlyException     * @Execution(index="toggle-call-warning",isAjax="true")     */    public function togglekCallWarning($id_device, $id_call)    {        if (!Call::columnValueExists("_id", $id_call) or !Device::columnValueExists("id", $id_device)) throw new UserFriendlyException(Translator::getString("callnotfound"), Translator::getString("failed"));        $Call = new Call($id_device);        $Call->setId($id_call);        $Call->load();        if ($Call->getDevice()->getIdUser() != $this->getId()) throw new UserFriendlyException(Translator::getString("callnotfodund"), Translator::getString("failed"));        $Call->setWarning($Call->getWarning()=="Y" ? "N":"Y");        $Call->save();        return new Response(            array(                "status" => true,                "type" => "success",                "title" => Translator::getString("success"),                "message" => Translator::getString("callupdated")            )        );    }}