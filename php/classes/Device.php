<?class Device extends WritablePersistence{    protected $id, $name, $id_user, $sync_time_interval, $allowed_sync_network, $sync;    public function __construct($id = null, $name = null, $id_user = null, $sync_time_interval = null, $allowed_sync_network = null, $sync = null)    {        parent::__construct();        $this->id = $id;        $this->name = $name;        $this->id_user = $id_user;        $this->sync_time_interval = $sync_time_interval;        $this->allowed_sync_network = $allowed_sync_network;        $this->sync = $sync;    }    /**     * @return null     */    public function getId()    {        return $this->id;    }    /**     * @param null $id     */    public function setId($id)    {        $this->id = $id;    }    /**     * @return null     */    public function getIdUser()    {        return $this->id_user;    }    /**     * @param null $id_user     */    public function setIdUser($id_user)    {        $this->id_user = $id_user;    }    /**     * @param null $name     */    public function setName($name)    {        $this->name = $name;    }    public function getName()    {        return $this->name;    }    /**     * @return mixed     */    public function getSyncTimeInterval()    {        return $this->sync_time_interval;    }    /**     * @param mixed $sync_time_interval     */    public function setSyncTimeInterval($sync_time_interval)    {        $this->sync_time_interval = $sync_time_interval;    }    /**     * @return mixed     */    public function getAllowedSyncNetwork()    {        return $this->allowed_sync_network;    }    /**     * @param mixed $allowed_sync_network     */    public function setAllowedSyncNetwork($allowed_sync_network)    {        $this->allowed_sync_network = $allowed_sync_network;    }    /**     * @return null     */    public function getSync()    {        return $this->sync;    }    /**     * @param null $sync     */    public function setSync($sync)    {        $this->sync = $sync;    }    public function isActive()    {        return true;    }    public static function isDevice($id_device)    {        return self::columnValueExists("id", $id_device);    }    public static function getDevice($id_device)    {        $Device = new Device($id_device);        $Device->load();        return $Device;    }    /**     * @param Sms $sms     * @return Table     */    public function getSmsList(Sms $sms = null)    {        $sms = $sms === null ? new Sms() : $sms;        $sms->setIdDevice($this->getId());        return parent::getSmsList($sms);    }    public function getSmsCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM sms WHERE YEAR(added_at)=:year AND id_device=:id_device GROUP BY MONTH(added_at)");        $pstm->setValue("id_device", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        return $result;    }    public function getCallCountPerMonth($year)    {        $pstm = DatabaseAccessor::connection()->open()->prepare("SELECT MONTH(added_at) As month,count(*) As cnt FROM `call` WHERE YEAR(added_at)=:year AND id_device=:id_device GROUP BY MONTH(added_at)");        $pstm->setValue("id_device", $this->getId());        $pstm->setValue("year", $year);        $table = $pstm->executeQuery();        $result = new Row(array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0));        while ($table->hasNext()) {            $row = $table->next();            $result->getColumn($row->getColumn("month")->getValue())->setValue(intval($row->getColumn("cnt")->getValue()));        }        return $result;    }    /**     * @return Table     * @internal param Device $device     */    public function getLastSmsForEachThread()    {        DatabaseAccessor::connection()->open();        $pstm = DatabaseAccessor::connection()->prepare(            "SELECT _id FROM sms As s WHERE s.id_device=:id_device AND s._id=(SELECT max(_id) FROM sms WHERE thread_id=s.thread_id) ORDER BY s.date DESC"        );        $pstm->setValue("id_device", $this->getId());        $table = $pstm->executeQuery();        $Result = new Table();        while ($table->hasNext()) {            $Sms = new Sms();            $Sms->setIdDevice($this->getId());            $Sms->setId($table->next()->next()->getValue());            $Sms->load();            $Result->push(new Row(array($Sms)));        }        return $Result;    }    /**     * @param $thread_id     * @return int     * @internal param Device $device     * @internal param $contact     */    public function getUnreviewedSmsCount($thread_id)    {        return DatabaseAccessor::connection()            ->open()            ->prepare("SELECT count(*) FROM sms WHERE id_device=:id_device AND thread_id=:thread_id AND reviewed=0")            ->setValue("id_device", $this->getId())            ->setValue("thread_id", $thread_id)            ->executeQuery()            ->next()->next()->getValue();    }    /**     * @param Call|null $call     * @return Table     */    public function getCallList(Call $call = null)    {        return parent::getCallList($call ? $call : new Call());    }    public function getLastMonthCommunicationCost()    {        $CallList = $this->getCallList();        $CallList->filter(function (Row $row) {            /* @var $Call Call */            $Call = $row->first()->getValue();            $AddedAt = new Dtime(strtotime($Call->getAddedAt()));            return $AddedAt->getYear() == Dtime::Now()->getPreviousMonth()->getYear() && $AddedAt->getMonth() == Dtime::Now()->getPreviousMonth()->getMonth();        });        $sum_call_duration = $CallList->compute(function (Row $row, $value) {            /* @var $Call Call */            $Call = $row->first()->getValue();            $value += $Call->getDuration();        });        $SmsList = $this->getSmsList();        $SmsList->filter(function (Row $row) {            /* @var $Sms Sms */            $Sms = $row->first()->getValue();            $AddedAt = new Dtime(strtotime($Sms->getAddedAt()));            return $AddedAt->getYear() == Dtime::Now()->getPreviousMonth()->getYear() && $AddedAt->getMonth() == Dtime::Now()->getPreviousMonth()->getMonth();        });        $sms_count = $this->getSmsList()->length();        return $cost = (($sum_call_duration / 60) * 2) + $sms_count;    }    public function getCurrentMonthCommunicationCost()    {        $CallList = $this->getCallList();        $CallList->filter(function (Row $row) {            /* @var $Call Call */            $Call = $row->first()->getValue();            $AddedAt = new Dtime(strtotime($Call->getAddedAt()));            return $AddedAt->getYear() == Dtime::Now()->getYear() && $AddedAt->getMonth() == Dtime::Now()->getMonth();        });        $sum_call_duration = $CallList->compute(function (Row $row, $value) {            /* @var $Call Call */            $Call = $row->first()->getValue();            $value += $Call->getDuration();        });        $SmsList = $this->getSmsList();        $SmsList->filter(function (Row $row) {            /* @var $Sms Sms */            $Sms = $row->first()->getValue();            $AddedAt = new Dtime(strtotime($Sms->getAddedAt()));            return $AddedAt->getYear() == Dtime::Now()->getYear() && $AddedAt->getMonth() == Dtime::Now()->getMonth();        });        $sms_count = $this->getSmsList()->length();        return $cost = (($sum_call_duration / 60) * 2) + $sms_count;    }    public function delete()    {        $this->getSmsList()->each(function (Row $row) {            $row->first()->getValue()->delete();        });        $this->getCallList()->each(function (Row $row) {            $row->first()->getValue()->delete();        });        return parent::delete(); // TODO: Change the autogenerated stub    }}