<?class Sms extends WritablePersistence implements Media{    protected $id_device, $_id, $thread_id, $contact, $phone_number, $body, $date, $reviewed, $type, $warning, $added_at;    /**     * Sms constructor.     * @param $id_device     * @param $_id     * @param $contact     * @param null $phone_number     * @param $body     * @param $date     * @param $reviewed     * @param null $type     * @param $added_at     */    public function __construct($id_device = null, $_id = null, $thread_id = null, $contact = null, $phone_number = null, $body = null, $date = null, $reviewed = null, $type = null, $warning = null, $added_at = null)    {        parent::__construct();        $this->id_device = $id_device;        $this->_id = $_id;        $this->thread_id = $thread_id;        $this->contact = $contact;        $this->phone_number = $phone_number;        $this->body = $body;        $this->date = $date;        $this->reviewed = $reviewed;        $this->type = $type;        $this->warning = $warning;        $this->added_at = $added_at;    }    /**     * @return null     */    public function getIdDevice()    {        return $this->id_device;    }    /**     * @param null $id_device     */    public function setIdDevice($id_device)    {        $this->id_device = $id_device;    }    /**     * @return null     */    public function getId()    {        return $this->_id;    }    /**     * @param null $id     */    public function setId($id)    {        $this->_id = $id;    }    /**     * @return null     */    public function getThreadId()    {        return $this->thread_id;    }    /**     * @param null $thread_id     */    public function setThreadId($thread_id)    {        $this->thread_id = $thread_id;    }    /**     * @return null     */    public function getContact()    {        return $this->contact;    }    /**     * @param null $contact     */    public function setContact($contact)    {        $this->contact = $contact;    }    /**     * @return null     */    public function getPhoneNumber()    {        return $this->phone_number;    }    /**     * @param null $phone_number     */    public function setPhoneNumber($phone_number)    {        $this->phone_number = $phone_number;    }    /**     * @return null     */    public function getBody()    {        return $this->body;    }    /**     * @param null $body     */    public function setBody($body)    {        $this->body = $body;    }    /**     * @return null     */    public function getDate()    {        return $this->date;    }    /**     * @param null $date     */    public function setDate($date)    {        $this->date = $date;    }    /**     * @return null     */    public function getReviewed()    {        return $this->reviewed;    }    /**     * @param null $reviewed     */    public function setReviewed($reviewed)    {        $this->reviewed = $reviewed;    }    /**     * @return null     */    public function getType()    {        return $this->type;    }    /**     * @param null $type     */    public function setType($type)    {        $this->type = $type;    }    /**     * @return null     */    public function getWarning()    {        return $this->warning;    }    /**     * @param null $warning     */    public function setWarning($warning)    {        $this->warning = $warning;    }    /**     * @return null     */    public function getAddedAt()    {        return $this->added_at;    }    /**     * @param null $added_at     */    public function setAddedAt($added_at)    {        $this->added_at = $added_at;    }        public static function bindTo(Device $device, Row $data)    {        $Sms = new Sms($device->getId());        if (!$data->indexExists("_id")) throw new UserFriendlyException("_id is missing", "Failed", 1004);        $Sms->setId($data->getColumn("_id")->getValue());        if (!$data->indexExists("thread_id")) throw new UserFriendlyException("thread_id is missing", "Failed", 1004);        $Sms->setThreadId($data->getColumn("thread_id")->getValue());        if (!$data->indexExists("contact")) throw new UserFriendlyException("contact is missing", "Failed", 1004);        $Sms->setContact($data->getColumn("contact")->getValue());        if (!$data->indexExists("phone_number")) throw new UserFriendlyException("phone_number is missing", "Failed", 1004);        $Sms->setPhoneNumber($data->getColumn("phone_number")->getValue());        if (!$data->indexExists("date")) throw new UserFriendlyException("date is missing", "Failed", 1004);        $Sms->setDate($data->getColumn("date")->getValue());        if (!$data->indexExists("body")) throw new UserFriendlyException("body is missing", "Failed", 1004);        $Sms->setBody($data->getColumn("body")->getValue());        if (!$data->indexExists("type")) throw new UserFriendlyException("type is missing", "Failed", 1004);        $Sms->setType($data->getColumn("type")->getValue());        if (self::find(new Sms($device->getId(), $Sms->getId()))->length()) {            $Sms->load();            $Sms->save();        } else self::insert($Sms);    }}